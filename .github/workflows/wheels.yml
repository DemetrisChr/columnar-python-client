name: wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The Release version.  Allowed format: x.y.z[-alphaN | -betaN | -rcN | -devN | -postN]"
        required: true
        default: "1.0.0-dev0"
        type: string
      cxx_change:
        description: "The PR number or SHA if wanting to build against a PR/SHA in the C++ SDK"
        required: false
        type: string


jobs:
  pre-commit:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt
          python -m pip install pre-commit
      - name: Set SDK version
        run: |
          git config user.name "Couchbase SDK Team"
          git config user.email "sdk_dev@couchbase.com"
          git tag -a $COUCHBASE_VERSION -m "Release of client version $COUCHBASE_VERSION"
          python couchbase_columnar_version.py --mode make
        env:
          COUCHBASE_VERSION: ${{ inputs.version }}
      - name: Run pre-commit
        run: pre-commit run --all-files

  sdist:
    runs-on: ubuntu-20.04
    needs: pre-commit
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout pull-request
        if: github.event_name == 'workflow_dispatch' && inputs.cxx_change != '' && startsWith(inputs.cxx_change, 'PR_')
        run: |
          cd deps/couchbase-cxx-client
          git fetch origin pull/$(echo "$CXX_CHG" | cut -d'_' -f 2)/head:tmp
          git checkout tmp
          git log --oneline -n 10
        env:
          CXX_CHG: ${{ inputs.cxx_change }}
      - name: Checkout branch
        if: github.event_name == 'workflow_dispatch' && inputs.cxx_change != '' && startsWith(inputs.cxx_change, 'BR_')
        run: |
          cd deps/couchbase-cxx-client
          git fetch origin
          git --no-pager branch -r
          git checkout $(echo "$CXX_CHG" | cut -d'_' -f 2)
          git log --oneline -n 10
          cd ../..
        env:
          CXX_CHG: ${{ inputs.cxx_change }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Set CPM cache
        run: PYCBCC_USE_OPENSSL=off python setup.py configure_ext
      - name: Set SDK version
        run: |
          git config user.name "Couchbase SDK Team"
          git config user.email "sdk_dev@couchbase.com"
          git tag -a $PYCBCC_VERSION -m "Release of client version $PYCBCC_VERSION"
          python couchbase_columnar_version.py --mode make
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - name: Create sdist
        id: build_sdist
        run: |
          rm -rf ./build
          python setup.py sdist
      - uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: pycbcc-${{ inputs.version }}-sdist
          path: |
            ./dist/*.tar.gz

  linux_x86_64_wheel:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    needs: sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pycbcc-${{ inputs.version }}-sdist
      - name: Extract sdist source
        run: |
          ls -alh
          SDIST_VERSION=$(echo $PYCBCC_VERSION | sed -r 's/-/./')
          tar -xvzf couchbase_columnar-$SDIST_VERSION.tar.gz
          cp -r couchbase_columnar-$SDIST_VERSION/. .
          rm -rf couchbase_columnar-$SDIST_VERSION
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - name: Setup Python  ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Build wheel
        run: |
          mkdir bdist
          python -m pip wheel . --no-deps -w bdist -v -v -v
        env:
          PYCBCC_BUILD_TYPE: RelWithDebInfo
          PYCBCC_USE_OPENSSL: OFF
          PYCBCC_VERBOSE_MAKEFILE: ON
      - name: Reduce wheel size
        id: reduce_wheel_size
        run: |
          cd bdist
          WHEEL_NAME=couchbase_columnar-$(echo $PYCBCC_VERSION | sed -r 's/-/./')
          python -m wheel unpack $WHEEL_NAME*.whl
          ls -alh
          cd $WHEEL_NAME/couchbase_columnar/protocol
          cp pycbcc_core.so pycbcc_core.orig.so
          objcopy --only-keep-debug pycbcc_core.so pycbcc_core.debug.so
          objcopy --strip-debug --strip-unneeded pycbcc_core.so
          objcopy --add-gnu-debuglink=pycbcc_core.debug.so pycbcc_core.so
          ls -alh | grep pycbcc
          rm pycbcc_core.orig.so pycbcc_core.debug.so
          cd ../../..
          python -m wheel pack $WHEEL_NAME
          ls -alh
          WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
          echo "wheel_name=${WHEEL_NAME}" >> "$GITHUB_OUTPUT"
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ steps.reduce_wheel_size.outputs.wheel_name }}
          path: |
            ./bdist/${{ steps.reduce_wheel_size.outputs.wheel_name }}

  macos_x86_64_wheel:
    runs-on: macos-13
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    needs: sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pycbcc-${{ inputs.version }}-sdist
      - name: Extract sdist source
        run: |
          ls -alh
          SDIST_VERSION=$(echo $PYCBCC_VERSION | sed -r 's/-/./')
          tar -xvzf couchbase_columnar-$SDIST_VERSION.tar.gz
          cp -r couchbase_columnar-$SDIST_VERSION/. .
          rm -rf couchbase_columnar-$SDIST_VERSION
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - name: Setup Python  ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Downgrade CMake
        run: |
          brew uninstall cmake
          mkdir ~/Downloads/CMake
          curl --silent --location --retry 3 "https://github.com/Kitware/CMake/releases/download/v3.28.1/cmake-3.28.1-macos-universal.dmg" --output ~/Downloads/CMake/cmake-Darwin-x86_64.dmg
          yes | PAGER=cat hdiutil attach -quiet -mountpoint /Volumes/cmake-Darwin-x86_64 ~/Downloads/CMake/cmake-Darwin-x86_64.dmg
          cp -R /Volumes/cmake-Darwin-x86_64/CMake.app /Applications/
          hdiutil detach /Volumes/cmake-Darwin-x86_64
          sudo "/Applications/CMake.app/Contents/bin/cmake-gui" --install=/usr/local/bin
      - name: Build wheel
        run: |
          mkdir bdist
          python -m pip wheel . --no-deps -w bdist -v -v -v
        env:
          PYCBCC_BUILD_TYPE: RelWithDebInfo
          PYCBCC_USE_OPENSSL: OFF
          PYCBCC_VERBOSE_MAKEFILE: ON
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          ARCHFLAGS: '"-arch x86_64"'
          CMAKE_OSX_ARCHITECTURES: x86_64
          _PYTHON_HOST_PLATFORM: macosx-10.15-x86_64
      - name: Reduce wheel size
        id: reduce_wheel_size
        run: |
          cd bdist
          WHEEL_NAME=couchbase_columnar-$(echo $PYCBCC_VERSION | sed -r 's/-/./')
          python -m wheel unpack $WHEEL_NAME*.whl
          ls -alh
          cd $WHEEL_NAME/couchbase_columnar/protocol
          cp pycbcc_core.so pycbcc_core.orig.so
          xcrun strip -Sx pycbcc_core.so
          ls -alh | grep pycbcc
          rm pycbcc_core.orig.so
          cd ../../..
          python -m wheel pack $WHEEL_NAME
          ls -alh
          WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
          echo "wheel_name=${WHEEL_NAME}" >> "$GITHUB_OUTPUT"
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ steps.reduce_wheel_size.outputs.wheel_name }}
          path: |
            ./bdist/${{ steps.reduce_wheel_size.outputs.wheel_name }}

  macos_arm64_wheel:
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    needs: sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pycbcc-${{ inputs.version }}-sdist
      - name: Extract sdist source
        run: |
          ls -alh
          SDIST_VERSION=$(echo $PYCBCC_VERSION | sed -r 's/-/./')
          tar -xvzf couchbase_columnar-$SDIST_VERSION.tar.gz
          cp -r couchbase_columnar-$SDIST_VERSION/. .
          rm -rf couchbase_columnar-$SDIST_VERSION
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - name: Setup Python  ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Confirm Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Build wheel
        run: |
          mkdir bdist
          python -m pip wheel . --no-deps -w bdist -v -v -v
        env:
          PYCBCC_BUILD_TYPE: RelWithDebInfo
          PYCBCC_USE_OPENSSL: OFF
          PYCBCC_VERBOSE_MAKEFILE: ON
          MACOSX_DEPLOYMENT_TARGET: "11.0"
          ARCHFLAGS: '"-arch arm64"'
          CMAKE_OSX_ARCHITECTURES: arm64
          _PYTHON_HOST_PLATFORM: macosx-11-arm64
      - name: Reduce wheel size
        id: reduce_wheel_size
        run: |
          cd bdist
          WHEEL_NAME=couchbase_columnar-$(echo $PYCBCC_VERSION | sed -r 's/-/./')
          python -m wheel unpack $WHEEL_NAME*.whl
          ls -alh
          cd $WHEEL_NAME/couchbase_columnar/protocol
          cp pycbcc_core.so pycbcc_core.orig.so
          xcrun strip -Sx pycbcc_core.so
          ls -alh | grep pycbcc
          rm pycbcc_core.orig.so
          cd ../../..
          python -m wheel pack $WHEEL_NAME
          ls -alh
          WHEEL_NAME=$(find . -name '*.whl' | cut -c 3-)
          echo "wheel_name=${WHEEL_NAME}" >> "$GITHUB_OUTPUT"
        env:
          PYCBCC_VERSION: ${{ inputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ steps.reduce_wheel_size.outputs.wheel_name }}
          path: |
            ./bdist/${{ steps.reduce_wheel_size.outputs.wheel_name }}
